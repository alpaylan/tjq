{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "TJQ",
    "scopeName": "source.tjq",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#holes"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.number-sign.tjq",
                    "match": "#.*$"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.tjq",
                    "match": "\\b(if|then|else|elif|end|and|or|not|try|catch|def|as|reduce|foreach|while|until)\\b"
                },
                {
                    "name": "constant.language.tjq",
                    "match": "\\b(null|true|false|empty)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.tjq",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.tjq",
                            "match": "\\\\."
                        },
                        {
                            "name": "meta.embedded.expression.tjq",
                            "begin": "\\\\\\(",
                            "end": "\\)",
                            "patterns": [
                                {
                                    "include": "$self"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.tjq",
                    "match": "\\b-?([0-9]+\\.?[0-9]*|\\.[0-9]+)([eE][+-]?[0-9]+)?\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.tjq",
                    "match": "(\\|=|\\+=|-=|\\*=|/=|//=|%=|=)"
                },
                {
                    "name": "keyword.operator.comparison.tjq",
                    "match": "(==|!=|<=|>=|<|>)"
                },
                {
                    "name": "keyword.operator.arithmetic.tjq",
                    "match": "(\\+|-|\\*|/|%|//)"
                },
                {
                    "name": "keyword.operator.pipe.tjq",
                    "match": "\\|"
                },
                {
                    "name": "keyword.operator.optional.tjq",
                    "match": "\\?"
                },
                {
                    "name": "keyword.operator.dot.tjq",
                    "match": "\\."
                },
                {
                    "name": "keyword.operator.recursive.tjq",
                    "match": "\\.\\."
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.builtin.tjq",
                    "match": "\\b(map|select|sort|sort_by|group_by|unique|unique_by|reverse|length|keys|keys_unsorted|values|type|has|in|contains|inside|startswith|endswith|split|join|add|min|max|min_by|max_by|tonumber|tostring|ascii_downcase|ascii_upcase|recurse)\\b"
                },
                {
                    "name": "entity.name.function.tjq",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*\\()"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.other.tjq",
                    "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
                }
            ]
        },
        "holes": {
            "patterns": [
                {
                    "name": "constant.other.placeholder.tjq",
                    "match": "\\?\\?"
                }
            ]
        }
    }
}